#version 450

#extension GL_GOOGLE_include_directive : enable

#include <shaders/animation/shared.glsl>

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

/// @todo move to another file and use everywhere
struct attribute_t
{
    vec4 pos;
    vec4 normal;
    vec4 tangent;
    vec4 uv;
};

/// @todo move to another file and use everywhere
struct skinning_data_t
{
    ivec4   bone_ids;
    vec4    weights;
};

layout(set = 0, binding = index_buffer_binding) readonly buffer index_buffer_b
{
    uint index_buffer[];
};

layout(set = 0, binding = src_vertex_buffer_binding) readonly buffer src_vertex_buffer_b
{
    attribute_t src_vertex_buffer[];
};

layout(set = 0, binding = dst_vertex_buffer_binding) buffer dst_vertex_buffer_b
{
    attribute_t dst_vertex_buffer[];
};

layout(set = 0, binding = skinning_data_binding) readonly buffer skinning_data_b
{
    skinning_data_t skinning_data[];
};

layout(set = 0, binding = final_bones_martices_binding) readonly buffer final_bones_martices_b
{
    mat4 final_bones_martices[];
};

void main()
{
    uint index = index_buffer[gl_GlobalInvocationID.x];

#if 0
    skinning_data_t skin_data = skinning_data[index];

    mat4 final_matrix = mat4(1);

    for (uint i = 0; i < 4 && skin_data.bone_ids[i] != -1; ++i)
        final_matrix *= final_bones_martices[skin_data.bone_ids[i]] * skin_data.weights[i];

    mat3 normla_matrix = inverse(transpose(mat3(final_matrix)));

    vec3 normal = src_vertex_buffer[index].normal.xyz;
    vec3 tangent = src_vertex_buffer[index].tangent.xyz;

    dst_vertex_buffer[index].pos        = final_matrix * src_vertex_buffer[index].pos;
    dst_vertex_buffer[index].normal     = vec4(normla_matrix * normal, 1.0);
    dst_vertex_buffer[index].tangent    = vec4(normla_matrix * tangent, 1.0);
    dst_vertex_buffer[index].uv         = src_vertex_buffer[index].uv;
#else 
    dst_vertex_buffer[index] = src_vertex_buffer[index];
#endif
}